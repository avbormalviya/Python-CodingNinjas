
# Problem statement

""" You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last
'N' nodes towards the front of the singly linked list and returns the new head to the list.

Hint:
Identify how many pointers you require and try traversing them to right places and connect nodes accordingly also don't
forget to disconnect what's required else it could create cycles. """


# solution


from node_class import LinkedList


def appendLastNToFirst(head, tail, n):
    """
    Appends the last 'n' nodes of the linked list to the beginning.
    Parameters:
        head (Node): The head node of the linked list.
        tail (Node): The tail node of the linked list.
        n (int): The number of nodes to append to the beginning.
    Returns:
        Node: The new head of the modified linked list.
    """
    if not head or n <= 0:  # Handle edge cases: empty list or invalid 'n'
        return head

    current = head

    for _ in range(n - 1):
        current = current.next

    # Update pointers to append last 'n' nodes to the beginning
    new_head = current.next
    current.next = None  # Break the list
    tail.next = head  # Connect the tail to the current head

    return new_head


if __name__ == "__main__":
    # Create an instance of the LinkedList class
    ll = LinkedList()

    # Take user input to create the linked list
    ll.input()

    # Print the original linked list
    ll.print()

    # Take user input for the number of nodes to append
    n = int(input())

    # Validate the input and perform the operation
    if 0 < n < ll.length:
        ll.head = appendLastNToFirst(ll.head, ll.tail, ll.length - n)
        # Print the modified linked list
        ll.print()
    else:
        print(f"Invalid value of n: {n}. Must be between 1 and {ll.length - 1}.")
